//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Christoffer/KartInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @KartInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @KartInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""KartInputs"",
    ""maps"": [
        {
            ""name"": ""Kart"",
            ""id"": ""928c6b06-ae4d-42d7-bbe1-c3a0d70b6c7c"",
            ""actions"": [
                {
                    ""name"": ""Drive"",
                    ""type"": ""Button"",
                    ""id"": ""23a2c793-7580-4e57-8bae-f74bd1234152"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Turning"",
                    ""type"": ""Button"",
                    ""id"": ""e43527e4-aa16-45ec-9c39-2b5c96ec606a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Breaking"",
                    ""type"": ""Button"",
                    ""id"": ""4f07fdbc-84ce-420d-b99d-f4319de32d54"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""b8abeb0e-6bf4-4edd-bfe8-1dd6bcb823bb"",
                    ""path"": ""1DAxis(whichSideWins=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drive"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""c5af0c40-5fd6-44eb-9a1f-40fc15b8da67"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""9d3e37a2-a2c6-41f6-b098-1f6427d15116"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""62f54b8f-e396-4314-b995-e8e012ef5b24"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turning"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""a7b5c71d-68f8-4dce-a4e4-fe470443647d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turning"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""b0ddc884-b517-4c96-a9a1-46d517ce0dd2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turning"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""348576ad-0bdf-4c37-93d1-a0c41fff1b3d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Breaking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Kart
        m_Kart = asset.FindActionMap("Kart", throwIfNotFound: true);
        m_Kart_Drive = m_Kart.FindAction("Drive", throwIfNotFound: true);
        m_Kart_Turning = m_Kart.FindAction("Turning", throwIfNotFound: true);
        m_Kart_Breaking = m_Kart.FindAction("Breaking", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Kart
    private readonly InputActionMap m_Kart;
    private IKartActions m_KartActionsCallbackInterface;
    private readonly InputAction m_Kart_Drive;
    private readonly InputAction m_Kart_Turning;
    private readonly InputAction m_Kart_Breaking;
    public struct KartActions
    {
        private @KartInputs m_Wrapper;
        public KartActions(@KartInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Drive => m_Wrapper.m_Kart_Drive;
        public InputAction @Turning => m_Wrapper.m_Kart_Turning;
        public InputAction @Breaking => m_Wrapper.m_Kart_Breaking;
        public InputActionMap Get() { return m_Wrapper.m_Kart; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KartActions set) { return set.Get(); }
        public void SetCallbacks(IKartActions instance)
        {
            if (m_Wrapper.m_KartActionsCallbackInterface != null)
            {
                @Drive.started -= m_Wrapper.m_KartActionsCallbackInterface.OnDrive;
                @Drive.performed -= m_Wrapper.m_KartActionsCallbackInterface.OnDrive;
                @Drive.canceled -= m_Wrapper.m_KartActionsCallbackInterface.OnDrive;
                @Turning.started -= m_Wrapper.m_KartActionsCallbackInterface.OnTurning;
                @Turning.performed -= m_Wrapper.m_KartActionsCallbackInterface.OnTurning;
                @Turning.canceled -= m_Wrapper.m_KartActionsCallbackInterface.OnTurning;
                @Breaking.started -= m_Wrapper.m_KartActionsCallbackInterface.OnBreaking;
                @Breaking.performed -= m_Wrapper.m_KartActionsCallbackInterface.OnBreaking;
                @Breaking.canceled -= m_Wrapper.m_KartActionsCallbackInterface.OnBreaking;
            }
            m_Wrapper.m_KartActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Drive.started += instance.OnDrive;
                @Drive.performed += instance.OnDrive;
                @Drive.canceled += instance.OnDrive;
                @Turning.started += instance.OnTurning;
                @Turning.performed += instance.OnTurning;
                @Turning.canceled += instance.OnTurning;
                @Breaking.started += instance.OnBreaking;
                @Breaking.performed += instance.OnBreaking;
                @Breaking.canceled += instance.OnBreaking;
            }
        }
    }
    public KartActions @Kart => new KartActions(this);
    public interface IKartActions
    {
        void OnDrive(InputAction.CallbackContext context);
        void OnTurning(InputAction.CallbackContext context);
        void OnBreaking(InputAction.CallbackContext context);
    }
}
